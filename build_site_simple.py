#!usr/bin/env python
"""Simple script to create the dynamic site components.
"""
print("Importing packages...")
import argparse
from pathlib import Path

import jinja2
import pandas as pd
import plotly
import plotly.express as px
import yaml
print("Imports done")

DEFAULT_PARAMS = dict(
    input_file=Path("inputs/default_build_params.yaml"),
    output_dir=Path("site/"),
    templates_dir=Path("templates/"),
)


def main():
    # Preamble operations
    parser = get_arg_parser()
    args = parser.parse_args()
    params = import_params(args)
    data = Data()

    # Main operations
    make_plots(params, data)
    render_templates(params, data)
    export_pages(params, data)


class Params:
    """All parameters. Include hardcoded script params, those read
    from inputs, and overriden by command line flags.

    Parameters will have type hints in PyCharm, but raise
    AttributeError if referenced before assignment.

    This class works more as an autocomplete guide. It will receive
    any parameter that is either defined in DEFAULT_PARAMS, the input
    file and command line arguments.
    """
    input_file: Path
    output_dir: Path
    incidence_data_path: Path
    templates_dir: Path
    # ...


class Data:
    """Input, intermediate and output data.
    Input data is reserved for large structures. Smaller ones that
    can be manually set should be reserved as parameters.
    """
    incidence_df: pd.DataFrame
    inc_fig: plotly.graph_objs._figure.Figure
    inc_fig_html: str
    index_html: str  # Could be an HTML object
    # ...


def get_arg_parser():
    """Interprets and stores the command line arguments."""

    parser = argparse.ArgumentParser(
        # usage="[[COMMAND LINE SIGNATURE (autogenerated)[]",
        description="[[PROGRAM DESCRIPTION HERE]]",
        # epilog="[[TEXT DISPLAYED AFTER ARGUMENTS DESCRIPTION]]",
    )

    # --- Positional paths
    parser.add_argument(
        "-i", "--input_file", type=Path,
        help="Path to the file with input parameters.",
        default=DEFAULT_PARAMS["input_file"],
    )
    parser.add_argument(
        "-o", "--output_dir", type=Path,
        help="Path to the output directory, where all "
             "output files are stored.",
        default=DEFAULT_PARAMS["output_dir"],
    )

    # --- Optional flags

    return parser  # When all arguments are defined here
    # return parser.parse_known_args()  # If there are extra arguments


def import_params(args):
    """Imports the main YAML parameter file."""

    # --- Read file
    with open(args.input_file, "r") as fp:
        input_dict = yaml.load(fp, yaml.Loader)

    # --- Select command line arguments that are not `None`
    valid_args_dict = {
        key: val for key, val in args.__dict__.items() if val is not None
    }

    # --- Populate the Params in priority order
    # Script Default < Input File < Command Line Arguments
    params = Params()

    params.__dict__.update(DEFAULT_PARAMS)
    params.__dict__.update(input_dict)
    params.__dict__.update(valid_args_dict)

    # params.input_dict = input_dict  # Use this to keep the input_dict

    # You can rename parameters here.

    return params


def make_plots(params: Params, data: Data):
    """Construct required plots using plotly"""

    # --- Import data as csv
    data.incidence_df = pd.read_csv(
        params.incidence_data_path, index_col=0, parse_dates=[0],
    )

    # --- Make plotly figure
    data.inc_fig = px.bar(data.incidence_df)

    # # --- Export WATCHH
    # with (open(
    #         params.output_dir.joinpath("test.html"), "w", encoding="UTF-8"
    #     ) as fp
    # ):
    #     fp.write(inc_fig_html)


def render_templates(params: Params, data: Data):
    """"""
    # --- Write the figure content as HTML
    data.inc_fig_html = data.inc_fig.to_html(
        include_plotlyjs="cdn",  # True, "cdn" to get link
        full_html=False,
        default_height="500px",
        default_width="70%",
        div_id="incFig",
    )

    # --- Create jinja environment and load templates
    jenv = jinja2.Environment(
        loader=jinja2.FileSystemLoader(
            params.templates_dir, encoding='utf-8'),
        # autoescape=jinja2.select_autoescape(),  # That escapes HTML code to text

    )

    temp = jenv.get_template("index_template.html")

    # --- Put figures into templates
    data.index_html = temp.render({
        "incidence_figure": data.inc_fig_html,
    })

    # WATCH
    # print(data.inc_fig_html.encode("utf-8"))
    print(data.index_html)

    print("Templates rendered")


def export_pages(params: Params, data: Data):
    """Export generated content into files."""

    # --- Index
    path = params.output_dir.joinpath("index.html")
    with open(path, "w", encoding="UTF-8") as fp:
        fp.write(data.index_html)

    print("Index page created!")


if __name__ == '__main__':
    main()
